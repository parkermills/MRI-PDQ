PDQ Tutorial

In this tutorial, we will import a simple dataset (SPIO particles and bubbles suspended in agarose gel) and run PDQ on it to detect dipoles.



===== Tutorial Outline =====
1) Install PDQ
2) Load Tutorial Dataset
3) Convert Tutorial Dataset to MRIdata structure

X) Run PDQ

X) Unwrap Phase Image




1) ==== Install PDQ ====
Open MATLAB and choose "Set Path..." in the "File" menu (newer versions have 'Set Path' under the 'Home' tab)
In the window that topens, click "Add with Subfolders" and navigate to the directory/folder that contains this PDQ code.
Select this directory by clicking "Ok", then click "Save" to add these paths to MATLAB.
PDQ can now be used by MATLAB.





2) ==== Load Tutorial Dataset ====
This tutorial dataset consists of two images: 3D magnitude and 3D phase of SPIO particles in agarose gel. (Note to self: these three slices were originally numbered 149-151)


In MATLAB, run the commands:
>> load cmu_gel_3_magnitude
>> load cmu_gel_3_phase
>> load cmu_gel_3_phase_unwrapped



3) ==== Convert Tutorial Dataset to MRIdata structure ====
When importing data from a Bruker MRI scanner, I would load it into a structure called an 'MRIdata'.
We are going to trick PDQ into thinking that the tutorial dataset came from a Bruker MRI scanner.

In MATLAB, run the commands:
>> cmu_gel_3.mag = cmu_gel_3_magnitude; % Copy the tutorial's magnitude image into the structure
>> cmu_gel_3.phase = cmu_gel_3_phase;   % Copy the tutorial's phase image into the structure
>> cmu_gel_3.unwrapped = cmu_gel_3_phase_unwrapped; %
>> cmu_gel_3.k_space_type = '3d';
>> cmu_gel_3.B0 = 500.1212;
>> 



X) ==== Run PDQ ====
To run PDQ on this dataset, the command is:
PDQ_result = PDQ(cmu_gel_3, -9.035e-6, 1, [50 100], 0);

I am providing the software with 5 arguments:
1) cmu_gel_3: The MRIdata structure containing the images of the gel.
2) -9.035e-6: The magnetic susceptibility of the gel.
3)         1: The orientation of the magnetic field (B0)
4)  [50 100]: The range of radius I expect for dipoles in this gel (50 - 100 um)
5)         0: The type of background noise (see documentation)






X) ==== Unwrap Phase Image ====
The phase image you imported has phase unwrapping artifacts!
To remove these we'll export the phase image to NII format, then run PRELUDE to perform 3D phase unwrapping.
This step can only be performed on a Linux or Mac OS X platform

In MATLAB, change your current directory to the folder that contains the PSM code (PSM.m), then run the commands:
>> cmu_gel_3_mask = imfill(logical(cmu_gel_3_magnitude > 0.03),'holes'); % Create a mask for the dataset
>> save_nii(make_nii(single(cmu_gel_3_magnitude)), 'magnitude'); % Export the dataset's magnitude image
>> save_nii(make_nii(single(cmu_gel_3_mask)), 'mask'); % Export the dataset's mask
>> save_nii(make_nii(single(cmu_gel_3_phase)),'wrapped_phase'); % Export the dataset's phase image
>> setenv('FSLOUTPUTTYPE', 'NIFTI_GZ');

If you're on a linux platform, next run:
>> system('./dependencies/prelude_linux -n 3 -p wrapped_phase.hdr -a magnitude.hdr -m mask.hdr -f -o unwrapped_phase&');

Otherwise, if you're in Mac OS X, run this:
>> system('./dependencies/prelude_macosx -n 3 -p wrapped_phase.hdr -a magnitude.hdr -m mask.hdr -f -o unwrapped_phase&');

Then wait 5 seconds for phase unwrapping to complete, then run:

>> unwrapped_phase = load_nii('unwrapped_phase.nii');
>> unwrapped_phase = unwrapped_phase.img;



X) ==== High-pass Filter the Unwrapped Phase ====
>> high_pass_filtered_phase = high_pass(unwrapped_phase, 5, 0.1);




