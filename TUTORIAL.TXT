%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
			PDQ Tutorial
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

In this tutorial, we will import a simple dataset (SPIO particles and bubbles suspended in agarose gel) and run PDQ on it to detect dipoles.


------------------
 Tutorial Outline
------------------
1) Install PDQ
2) Load Tutorial Data
3) Manually Convert Tutorial Data to an MRIdata structure
4) Run PDQ

Appendix A) Unwrap the Phase Image Yourself




1) ==== Install PDQ ====
Open MATLAB and choose "Set Path..." in the "File" menu (newer versions have 'Set Path' under the 'Home' tab)
In the window that topens, click "Add with Subfolders" and navigate to the directory/folder that contains this PDQ code.
Select this directory by clicking "Ok", then click "Save" to add these paths to MATLAB.
PDQ can now be used by MATLAB.





2) ==== Load Tutorial Data ====
This tutorial dataset consists of two images: 3D magnitude and 3D phase of SPIO particles in agarose gel. (Note to self: these three slices were originally numbered 149-151)


In MATLAB, run the commands:
>> load cmu_gel_3_magnitude
>> load cmu_gel_3_phase
>> load cmu_gel_3_phase_unwrapped % If you prefer, you can unwrap the phase image yourself -- see Appendix A for how to do that





3) ==== Manually Convert Tutorial Dataset to an MRIdata structure ====
When importing data from a Bruker MRI scanner, I would load it into a structure called an 'MRIdata'.
We are going to trick PDQ into thinking that the tutorial dataset came from a Bruker MRI scanner.

In MATLAB, run the commands:
>> cmu_gel_3.mag = cmu_gel_3_magnitude;              % Copy the tutorial's magnitude image into the structure
>> cmu_gel_3.phase = cmu_gel_3_phase;                % Copy the tutorial's phase image into the structure
>> cmu_gel_3.unwrapped = cmu_gel_3_phase_unwrapped;  % Copy the tutorial's unwrapped phase image into the structure
>> cmu_gel_3.k_space_type = '3d';                    % Tell PDQ this image was originally acquired in 3D (i.e., it used a 3D k-space)
>> cmu_gel_3.B0 = 500.1212;                          % Tell PDQ the field strength is 500 MHz (11.7 T)
>> cmu_gel_3.resolution = [54.6875 36.3281 36.3281]; % Tell PDQ that the voxels are sized 54 um x 36 um x 36 um.
>> cmu_gel_3.TE = 5;                                 % Tell PDQ that the echo time for this image was 5 milliseconds




4) ==== Run PDQ ====
To run PDQ on this dataset, the command is:
cmu_gel_3 = PDQ(cmu_gel_3, -9.035e-6, 1, [10 50], 0);

I am providing the software with 5 arguments:
1) cmu_gel_3: The MRIdata structure containing the images of the gel.
2) -9.035e-6: The magnetic susceptibility of the gel.
3)         1: The orientation of the magnetic field (B0)
4)  [10 50]: The range of radius I expect for dipoles in this gel (10 - 50 um)
5)         0: The type of background noise (see documentation)





5) ==== Analyze the Results ====
Now that PDQ has finished running, the MRIdata structure you provided contains additional information.

To see the new information type:
>> cmu_gel_3.PDQ

To learn more about one of the dipoles located by PDQ, type:
>> cmu_gel_3.PDQ.dipoles_hp(1)

You'll see a list of information about the dipole, including estimates of its magnetic properties. It's located at coordinates x,y,z = (14, 89, 5).

To view the dipole all on its own, type:
>> images(cmu_gel_3.PDQ.dipoles_hp(1).phase)

Now, there are over 80 dipoles found in small dataset. To show information about all the dipoles, run:
>> PDQ_visualize(cmu_gel_3);




Appendix A) ==== Unwrap the Phase Image Yourself ====
One of the tutorial datasets that you loaded (cmu_gel_3_phase) contains phase wraps. Phase wraps make PDQ potentially miss dipoles! To get around this, I provided you with this phase already unwrapped (cmu_gel_3_phase_unwrapped). But, you may need to remove phase wraps in your own datasets. Here is a little more information on how to unwrap the phase image.

To remove phase wraps we'll export the phase image to NII format, then run PRELUDE to perform 3D phase unwrapping.
This step can only be performed on a Linux or Mac OS X platform.

In MATLAB, change your current directory to the folder that contains the PDQ code (PDQ.m), then run the commands:

>> cmu_gel_3_mask = imfill(logical(cmu_gel_3_magnitude > 0.03),'holes'); % Create a mask for the dataset
>> save_nii(make_nii(single(cmu_gel_3_magnitude)), 'magnitude');         % Export the dataset's magnitude image
>> save_nii(make_nii(single(cmu_gel_3_mask)), 'mask');                   % Export the dataset's mask
>> save_nii(make_nii(single(cmu_gel_3_phase)),'wrapped_phase');          % Export the dataset's phase image
>> setenv('FSLOUTPUTTYPE', 'NIFTI_GZ');

If you're on a linux platform, next run:
>> system('./dependencies/prelude_linux -n 3 -p wrapped_phase.hdr -a magnitude.hdr -m mask.hdr -f -o unwrapped_phase&');

Otherwise, if you're in Mac OS X, run this:
>> system('./dependencies/prelude_macosx -n 3 -p wrapped_phase.hdr -a magnitude.hdr -m mask.hdr -f -o unwrapped_phase&');

Then wait 5 seconds for phase unwrapping to complete, then run:

>> cmu_gel_3_unwrapped_phase = load_nii('unwrapped_phase.nii');
>> cmu_gel_3_unwrapped_phase = cmu_gel_3_unwrapped_phase.img;

You've unwrapped the phase image. You can resume at Step 2 of the tutorial. PDQ will take care of the rest, including applying a high-pass filter to the unwrapped phase image.

